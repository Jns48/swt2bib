/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.swt2bib.ui.panels;

import de.swt2bib.fachlogik.historyverwaltung.History;
import de.swt2bib.fachlogik.kategorieverwaltung.Kategorie;
import de.swt2bib.fachlogik.medienverwaltung.Medien;
import de.swt2bib.ui.ElternPanel;
import de.swt2bib.ui.PanelHandler;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author root
 */
public class HistoryPanel extends ElternPanel {

    ArrayList<History> historyListe;

    /**
     * Creates new form HistoryPanel
     */
    public HistoryPanel(PanelHandler panelHandler) {
        super(panelHandler);
        initComponents();
        setComboboxKategorie(kategorieComboBox, panelHandler.getKategorieListe());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sucheFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sucheFieldActionPerformed
        panelHandler.panelUnsichtbar();
        panelHandler.getSuchePanel().setSearchTitel(sucheField.getText());
        panelHandler.getSuchePanel().setVisible(true);
    }//GEN-LAST:event_sucheFieldActionPerformed

    private void auswaehlenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_auswaehlenButtonActionPerformed
       try {
            panelHandler.getSelectPanel().setMedium(getMediumfromHistoryIndices(getListSelections()));
            panelHandler.panelUnsichtbar();
            panelHandler.getUi().add(panelHandler.getSelectPanel());
            if(panelHandler.getAktuellerUser().isMitarbeiter()){
                panelHandler.getSelectPanel().setMitarbeiter();
            }
            panelHandler.getSelectPanel().setVisible(true);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_auswaehlenButtonActionPerformed

    private void historysuchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historysuchFieldActionPerformed
        setSearchKategorie(kategorieComboBox.getSelectedItem()+"");
    }//GEN-LAST:event_historysuchFieldActionPerformed

    private void kategorieComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kategorieComboBoxActionPerformed
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        String text = kategorieComboBox.getItemAt(0);
        int selectedID = -1;
        panelHandler.getKategorieListe();
        
        for (int i = 0; i < panelHandler.getKategorieListe().size(); i++) {
            if(panelHandler.getKategorieListe().get(i).getBezeichnung().equals(text))
                selectedID=(int) panelHandler.getKategorieListe().get(i).getId();
        }
        
        for (int i = model.getRowCount() - 1; i > -1; i--) {
            model.removeRow(i);
        }
        for (int i = 0; i < historyListe.size(); i++) {
            if(historyListe.get(i).getKategorieid()==selectedID)
             model.addRow(new Object[]{historyListe.get(i).getId()});    
        }
        
    }//GEN-LAST:event_kategorieComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton auswaehlenButton;
    private javax.swing.JTextField historysuchField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> kategorieComboBox;
    private javax.swing.JLabel kategorieLable;
    private javax.swing.JTextField sucheField;
    // End of variables declaration//GEN-END:variables

    public void setUserHistory(ArrayList<History> history) {
       historyListe = history;
    }
    
    private Medien getMediumfromHistoryIndices(int position) {
		History selected = null;
                Medien medium = null;
		selected = historyListe.get(position);
                medium = panelHandler.mapHistoryAndMedium(selected);
		return medium;
	}
    
    private int getListSelections() {
	int[] selected = jTable1.getSelectedRows();
	for (int i = 0; i < selected.length; i++) {
		selected[i] = jTable1.convertRowIndexToModel(selected[i]);
	}
	return selected[0];
    }
    
    private void setComboboxKategorie(JComboBox combobox,List<Kategorie> list){
        String[] tmp = new String[list.size()];
        for (int i = 0; i < list.size(); i++) {
            tmp[i] = list.get(i).getBezeichnung();
        }        
        combobox.setModel(new DefaultComboBoxModel(tmp));
    }

    private void setSearchKategorie(String kategorie) {
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        
        for (int i = model.getRowCount() - 1; i > -1; i--) {
            model.removeRow(i);
        }
        int kategorieid = -1;
        for (int i = 0; i < panelHandler.getKategorieListe().size(); i++) {
         if(panelHandler.getKategorieListe().get(i).getBezeichnung().equals(kategorie))   
             kategorieid=(int) panelHandler.getKategorieListe().get(i).getId();
        }
                        
        for (int i = 0; i < historyListe.size(); i++) {
            if(historyListe.get(i).getKategorieid()==kategorieid)
             model.addRow(addObject(i));    
        }
    }

    private Object[] addObject(int i) {
        String medienName = "";
        
        for (int j = 0; j < panelHandler.returnMedien().size(); j++) {
            if(historyListe.get(i).getMedienid() == panelHandler.returnMedien().get(j).getId())
                medienName = panelHandler.returnMedien().get(j).getName();
        }
        
        String kategorieName = "";
        
        for (int j = 0; j < panelHandler.getKategorieListe().size(); j++) {
            if(historyListe.get(i).getKategorieid() == panelHandler.getKategorieListe().get(j).getId())
                medienName = panelHandler.getKategorieListe().get(j).getName();
        }
        
        return new Object[]{historyListe.get(i).getId(),panelHandler.getAktuellerUser().getUsername(),medienName,kategorieName};
    }

    public void fillTable() {
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        for (int i = model.getRowCount() - 1; i > -1; i--) {
            model.removeRow(i);
        }
        for (int i = 0; i < historyListe.size(); i++) {
          model.addRow(addObject(i));  
        }
    }
    
}
